{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of bilstm_cnn_crf","provenance":[{"file_id":"1bMhfDa1dOdaE39IDT5_ypaFRSpUUj6NU","timestamp":1584697139799}],"collapsed_sections":[],"authorship_tag":"ABX9TyNabSXBNsYHgvbE1zqyf4fJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"W9Dg649kY8Qv","colab_type":"code","colab":{}},"source":["from collections import OrderedDict\n","\n","import torch\n","import torch.nn as nn\n","from torch.nn import init\n","from torch.autograd import Variable\n","from torch import autograd\n","\n","import time\n","import _pickle as cPickle\n","\n","import urllib\n","import matplotlib.pyplot as plt\n","plt.rcParams['figure.dpi'] = 80\n","plt.style.use('seaborn-pastel')\n","\n","import os\n","import sys\n","import codecs\n","import re\n","import numpy as np\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DtAGy_6HZhHc","colab_type":"code","colab":{}},"source":["\n","\n","#parameters for the Model\n","parameters = OrderedDict()\n","parameters['train'] = \"./data/eng.train\" #Path to train file\n","parameters['dev'] = \"./data/eng.testa\" #Path to test file\n","parameters['test'] = \"./data/eng.testb\" #Path to dev file\n","parameters['tag_scheme'] = \"BIOES\" #BIO or BIOES\n","parameters['lower'] = True # Boolean variable to control lowercasing of words\n","parameters['zeros'] =  True # Boolean variable to control replacement of  all digits by 0 \n","parameters['char_dim'] = 30 #Char embedding dimension\n","parameters['word_dim'] = 300 #Token embedding dimension\n","parameters['word_lstm_dim'] = 200 #Token LSTM hidden layer size\n","parameters['word_bidirect'] = True #Use a bidirectional LSTM for words\n","parameters['embedding_path'] = \"data/glove.6B.300d.txt\" #Location of pretrained embeddings\n","parameters['all_emb'] = 1 #Load all embeddings\n","parameters['crf'] =1 #Use CRF (0 to disable)\n","parameters['dropout'] = 0.5 #Droupout on the input (0 = no dropout)\n","parameters['epoch'] =  50 #Number of epochs to run\"\n","parameters['weights'] = \"\" #path to Pretrained for from a previous run\n","parameters['name'] = \"self-trained-model\" # Model name\n","parameters['gradient_clip']=5.0\n","parameters['char_mode']=\"CNN\"\n","models_path = \"./models/\" #path to saved models\n","\n","#GPU\n","parameters['use_gpu'] = torch.cuda.is_available() #GPU Check\n","use_gpu = parameters['use_gpu']\n","\n","parameters['reload'] = False \n","\n","#Constants\n","START_TAG = '<START>'\n","STOP_TAG = '<STOP>'\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bR8PwSS0ZmvE","colab_type":"code","outputId":"803e6d12-f4ab-45b2-a792-9abb9514ab9d","executionInfo":{"status":"ok","timestamp":1584695645001,"user_tz":-330,"elapsed":35448,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q6U8GUiXaGdb","colab_type":"code","colab":{}},"source":["path = 'drive/My Drive/NLP/train_task2.csv'\n","import pandas as pd\n","df = pd.read_csv(path)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dUly9toGAx9Q","colab_type":"code","outputId":"32996aaf-34e9-4b39-eede-9cf49fa837dd","executionInfo":{"status":"ok","timestamp":1583365133964,"user_tz":-330,"elapsed":3780,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":86}},"source":["df.keys()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['sentenceID', 'sentence', 'antecedent', 'consequent',\n","       'antecedent_startid', 'antecedent_endid', 'consequent_startid',\n","       'consequent_endid'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"uQqEo3cQAFB2","colab_type":"code","outputId":"1d1b4390-0d7f-4568-a740-4d9dffb12771","executionInfo":{"status":"ok","timestamp":1583365133966,"user_tz":-330,"elapsed":1546,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":211}},"source":["for i in range(10):\n","  print(df['sentenceID'][i], ':', df['sentence'][i], '=', df['antecedent'][i], '+', df['consequent'][i], ': ', df['antecedent_startid'][i], df['antecedent_endid'][i], df['consequent_startid'][i], df['consequent_endid'][i])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["200000 : I don't think any of us---even economic gurus like Paul Krugman---really, truly understand just how bad it could've gotten \"on Main Street\" if the stimulus bill had become hamstrung by a filibuster threat or recalcitrant conservadems, the way so much of our legislation has since. = if the stimulus bill had become hamstrung by a filibuster threat or recalcitrant conservadems + I don't think any of us---even economic gurus like Paul Krugman---really, truly understand just how bad it could've gotten \"on Main Street\" :  140 232 0 138\n","200001 : The GOP's malignant amnesia regarding the economy would be hilarious were it not for the wreckage they caused. = were it not for the wreckage they caused + The GOP's malignant amnesia regarding the economy would be hilarious :  69 108 0 67\n","200002 : OPKO said in a statement Friday that it was aware of the lawsuit, but that the SEC failed to notify the company of its intent to sue prior to filing the complaint, which the company said \"contains serious factual inaccuracies.\" \"Had the SEC followed its own standard procedures, OPKO and Dr. Frost would gladly have provided information that would have answered a number of the SEC's apparent questions, and filing of this lawsuit against them could have been avoided,\" the statement read. = Had the SEC followed its own standard procedures + OPKO and Dr. Frost would gladly have provided information that would have answered a number of the SEC's apparent questions, and filing of this lawsuit against them could have been avoided :  229 276 279 466\n","200003 : TOP TWEETS -- @kurtbardella: \"if the first four weeks of the #Obama presidency were like this when I worked at #oversight we'd have issued so many subpoenas by now\" ... = if the first four weeks of the #Obama presidency were like this when I worked at #oversight + we'd have issued so many subpoenas by now :  30 120 122 162\n","200004 : \"If I had 10 pharmacists who worked with me, I could reach 100 people more effectively.\" = If I had 10 pharmacists who worked with me + I could reach 100 people more effectively :  1 42 45 85\n","200005 : Hell, Obama complained last year about the sorry state of the US infrastructure - what the HELL happened to the trillions in stolen dollars he spent on shovel-ready jobs at the start of his term???? Most of the infrastructure issues would be fixed if that money hadn't enriched his cronies. = if that money hadn't enriched his cronies + Most of the infrastructure issues would be fixed :  248 288 199 246\n","200006 : But something tells me that if the nominee were Amy Coney Barrett, Democrats would look for a reason to postpone the vote, hope to retake the Senate and then ... = if the nominee were Amy Coney Barrett + Democrats would look for a reason to postpone the vote, hope to retake the Senate and then :  28 64 67 156\n","200007 : If that was my daughter, I would have asked If I did something wrong. = If that was my daughter + I would have asked If I did something wrong :  0 22 25 67\n","200008 : He is on the record on numerous issues, if he were in fact a champion for civil rights, wouldn't the civil rights community support him unanimously? Where do you stand? It is clear from his record where he stands. = if he were in fact a champion for civil rights + wouldn't the civil rights community support him unanimously :  40 85 88 146\n","200009 : Thanks for the article on this new term that fits me so well, wish all your articles were worthy of praise. = wish all your articles were worthy of praise + {} :  62 105 -1 -1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EqzyOepEzPCk","colab_type":"code","colab":{}},"source":["labels = []\n","\n","for i in range(len(df['sentence'])):\n","  x = []\n","  x.append(df['sentenceID'][i])\n","  sent = df['sentence'][i]\n","  ant_s = df['antecedent_startid'][i]\n","  ant_e = df['antecedent_endid'][i]\n","  cons_s = df['consequent_startid'][i]\n","  cons_e = df['consequent_endid'][i]\n","\n","  c = 2\n","  a = 1\n","  o = 0\n","  slabel = []\n","  flag = True\n","  for j in range(len(df['sentence'][i])):\n","    if j == 0:\n","      flag = True\n","    elif sent[j-1] == ' ' or sent[j-1] == '\"':\n","      flag = True\n","    elif sent[j-1] == '-' and sent[j] != '-':\n","      flag = True\n","    else:\n","      flag = False\n","    \n","    if sent[j] == '\"':\n","      flag = False\n","    \n","    if sent[j] == ' ':\n","      flag = False\n","    \n","    if sent[j] == '-':\n","      flag = False\n","    \n","    if sent[j] == '.':\n","      flag = False\n","    \n","    if sent[j] == ',':\n","      flag = False\n","    \n","    if j >= ant_s and j <= ant_e:\n","      if flag:\n","        slabel.append(a)\n","    elif j>= cons_s and j<= cons_e:\n","      if flag:\n","        # print(sent[j])\n","        slabel.append(c)\n","    else:\n","      if flag:\n","        slabel.append(o)\n","    \n","  x.append(slabel)\n","  labels.append(x)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OuBFFTWqtb3J","colab_type":"code","colab":{}},"source":["labels = np.array(labels)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pmSem-O-1r4J","colab_type":"code","colab":{}},"source":["df_label = pd.DataFrame(labels, columns = ['sentenceID', 'word_label']) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wkaKHrEX5aBR","colab_type":"code","colab":{}},"source":["# df_label.to_csv('subtask_2_wordlevel_labels.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VvM-hJJW5nRm","colab_type":"code","colab":{}},"source":["# mkdir subtask2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTH85SyxmVDt","colab_type":"code","outputId":"db508a9d-a214-47a3-d44c-a865ad0bf4e0","executionInfo":{"status":"ok","timestamp":1583365144684,"user_tz":-330,"elapsed":2529,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd drive/My\\ Drive/NLP/"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/NLP\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cr3Cq2Hh6AkR","colab_type":"code","colab":{}},"source":["\n","\n","#paths to files \n","#To stored mapping file\n","mapping_file = 'data/mapping.pkl'\n","\n","#To stored model\n","name = parameters['name']\n","model_name = models_path + name #get_name(parameters)\n","\n","if not os.path.exists(models_path):\n","    os.makedirs(models_path)\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"H0t-JCO-0Qqu","colab_type":"code","colab":{}},"source":["def zero_digits(s):\n","    \"\"\"\n","    Replace every digit in a string by a zero.\n","    \"\"\"\n","    return re.sub('\\d', '0', s)\n","\n","def load_sentences(path, zeros):\n","    \"\"\"\n","    Load sentences. A line must contain at least a word and its tag.\n","    Sentences are separated by empty lines.\n","    \"\"\"\n","    sentences = []\n","    sentence = []\n","    for line in path['sentence']:\n","        line = zero_digits(line.rstrip()) if zeros else line.rstrip()\n","        if not line:\n","            if len(sentence) > 0:\n","                if 'DOCSTART' not in sentence[0][0]:\n","                    sentences.append(sentence)\n","                sentence = []\n","        else:\n","            # for c in range(len(line)):\n","            #   if line[c]=='.':\n","            #     if c != len(line)-1:\n","            #       if line[c+1] != ' ':\n","            #         line = line[:c+1] + ' ' + line[c+1:]\n","            word_ar = line.split()\n","            new_array = []\n","            assert len(word_ar) >= 2\n","\n","            for word in word_ar:\n","\n","              if '\"' not in word and '-' not in word and '.' not in word:\n","                new_array.append(word)\n","              else:\n","                if '\"' in word:\n","                  word_actual = ''\n","                  for w in range(len(word)):\n","                    char = word[w]\n","                    if char != '\"':\n","                      word_actual = word_actual + char\n","                  word = word_actual\n","                \n","                # if \"'\" in word:\n","                #   word_actual = ''\n","                #   for w in range(len(word)):\n","                #     char = word[w]\n","                #     if char != \"'\":\n","                #       word_actual = word_actual + char\n","                #   word = word_actual\n","                \n","                if '.' in word:\n","                  word_act = ''\n","                  for char in word:\n","                    if char != '.':\n","                      word_act += char\n","                  \n","                  word = word_act\n","\n","                for word_ in word.split('-'):\n","                  if word_ != '':\n","                    new_array.append(word_)\n","\n","\n","            sentence.append(new_array)\n","    if len(sentence) > 0:\n","        if 'DOCSTART' not in sentence[0][0]:\n","            sentences.append(sentence)\n","    return sentences\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1HQB0VJt0TsP","colab_type":"code","colab":{}},"source":["sents = load_sentences(df, parameters['zeros'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SvaDCwFn0X5V","colab_type":"code","outputId":"73081561-b0f8-45da-b338-f2bbe978d177","executionInfo":{"status":"ok","timestamp":1583365171330,"user_tz":-330,"elapsed":1921,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(sents[0])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3551"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"TqGkI--Cs7VP","colab_type":"code","outputId":"b99f43ea-cc65-4dc3-ce5b-ee1089be3e93","executionInfo":{"status":"ok","timestamp":1583365173343,"user_tz":-330,"elapsed":3182,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["from sklearn.model_selection import train_test_split\n","\n","seed = 0\n","split = 0.2\n","data_indices = np.arange(len(df['sentence']))\n","splits = train_test_split(data_indices, test_size = split, random_state = seed)\n","print(len(splits[0]), len(splits[1]))\n","c =0\n","for i in range(len(sents[0])):\n","  s = sents[0][i]\n","  if len(s) != len(labels[i][1]):\n","\n","    if i in splits[0]:\n","      splits[0] = np.delete(splits[0], np.where(splits[0] == i))\n","    \n","    if i in splits[1]:\n","      splits[1] = np.delete(splits[1], np.where(splits[1] == i))\n","    \n","    # print(len(s) , len(labels[i][1]))\n","    # print(s, labels[i][1])\n","    # print(i)\n","    # break\n","    c+=1\n","print(c)\n","print(len(splits[0]), len(splits[1]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2840 711\n","20\n","2823 708\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_suZ1qbzmqBr","colab_type":"code","colab":{}},"source":["\n","\n","def zero_digits(s):\n","    \"\"\"\n","    Replace every digit in a string by a zero.\n","    \"\"\"\n","    return re.sub('\\d', '0', s)\n","\n","def load_sentences(path, zeros, split):\n","    \"\"\"\n","    Load sentences. A line must contain at least a word and its tag.\n","    Sentences are separated by empty lines.\n","    \"\"\"\n","    sentences = []\n","    sentence = []\n","    for line in path['sentence'][split]:\n","        line = zero_digits(line.rstrip()) if zeros else line.rstrip()\n","        if not line:\n","            if len(sentence) > 0:\n","                if 'DOCSTART' not in sentence[0][0]:\n","                    sentences.append(sentence)\n","                sentence = []\n","        else:\n","            # for c in range(len(line)):\n","            #   if line[c]=='.':\n","            #     if c != len(line)-1:\n","            #       if line[c+1] != ' ':\n","            #         line = line[:c+1] + ' ' + line[c+1:]\n","            word_ar = line.split()\n","            new_array = []\n","            assert len(word_ar) >= 2\n","\n","            for word in word_ar:\n","\n","              if '\"' not in word and '-' not in word and '.' not in word:\n","                new_array.append(word)\n","              else:\n","                if '\"' in word:\n","                  word_actual = ''\n","                  for w in range(len(word)):\n","                    char = word[w]\n","                    if char != '\"':\n","                      word_actual = word_actual + char\n","                  word = word_actual\n","                \n","                # if \"'\" in word:\n","                #   word_actual = ''\n","                #   for w in range(len(word)):\n","                #     char = word[w]\n","                #     if char != \"'\":\n","                #       word_actual = word_actual + char\n","                #   word = word_actual\n","                \n","                if '.' in word:\n","                  word_act = ''\n","                  for char in word:\n","                    if char != '.':\n","                      word_act += char\n","                  \n","                  word = word_act\n","\n","                for word_ in word.split('-'):\n","                  if word_ != '':\n","                    new_array.append(word_)\n","\n","\n","            sentence.append(new_array)\n","    if len(sentence) > 0:\n","        if 'DOCSTART' not in sentence[0][0]:\n","            sentences.append(sentence)\n","    return sentences\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h2antzd6mzJ1","colab_type":"code","colab":{}},"source":["train_sentences = load_sentences(df, parameters['zeros'], splits[0])\n","dev_sentences = load_sentences(df, parameters['zeros'], splits[1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gxhWy5aNrFaw","colab_type":"code","colab":{}},"source":["# train_sentences = sentences[0][splits[0]]\n","train_labels = labels[splits[0]]\n","# dev_sentences = sentences[0][splits[1]]\n","dev_labels = labels[splits[1]]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lTw7L_zTyaws","colab_type":"code","outputId":"240fe184-3f94-40b1-a7ad-937f5f1d1024","executionInfo":{"status":"ok","timestamp":1583365183186,"user_tz":-330,"elapsed":3145,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(train_sentences[0][0]) == len(train_labels[0][1])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"Jvxnl2byMPLt","colab_type":"code","colab":{}},"source":["# Mapping\n","\n","def create_dico(item_list):\n","    \"\"\"\n","    Create a dictionary of items from a list of list of items.\n","    \"\"\"\n","    assert type(item_list) is list\n","    dico = {}\n","    for items in item_list:\n","        for item in items:\n","            if item not in dico:\n","                dico[item] = 1\n","            else:\n","                dico[item] += 1\n","    return dico\n","\n","def create_mapping(dico):\n","    \"\"\"\n","    Create a mapping (item to ID / ID to item) from a dictionary.\n","    Items are ordered by decreasing frequency.\n","    \"\"\"\n","    sorted_items = sorted(dico.items(), key=lambda x: (-x[1], x[0]))\n","    id_to_item = {i: v[0] for i, v in enumerate(sorted_items)}\n","    item_to_id = {v: k for k, v in id_to_item.items()}\n","    return item_to_id, id_to_item\n","\n","def word_mapping(sentences, lower):\n","    \"\"\"\n","    Create a dictionary and a mapping of words, sorted by frequency.\n","    \"\"\"\n","    words = [[x[0].lower() if lower else x[0] for x in s] for s in sentences]\n","    dico = create_dico(words)\n","    dico['<UNK>'] = 10000000 #UNK tag for unknown words\n","    word_to_id, id_to_word = create_mapping(dico)\n","    print(\"Found %i unique words (%i in total)\" % (\n","        len(dico), sum(len(x) for x in words)\n","    ))\n","    return dico, word_to_id, id_to_word\n","\n","def char_mapping(sentences):\n","    \"\"\"\n","    Create a dictionary and mapping of characters, sorted by frequency.\n","    \"\"\"\n","    chars = [\"\".join([w[0] for w in s]) for s in sentences]\n","    dico = create_dico(chars)\n","    char_to_id, id_to_char = create_mapping(dico)\n","    print(\"Found %i unique characters\" % len(dico))\n","    return dico, char_to_id, id_to_char\n","\n","def tag_mapping(sentences, labels):\n","    \"\"\"\n","    Create a dictionary and a mapping of tags, sorted by frequency.\n","    \"\"\"\n","    # tags = [[word[-1] for word in s] for s in sentences]\n","    # dico = create_dico(tags)\n","    # dico[START_TAG] = -1\n","    # dico[STOP_TAG] = -2\n","    # tag_to_id, id_to_tag = create_mapping(dico)\n","    # print(\"Found %i unique named entity tags\" % len(dico))\n","    # return dico, tag_to_id, id_to_tag\n","\n","    tags = [x[1] for x in labels]\n","    dico = create_dico(tags)\n","    dico[START_TAG] = -1\n","    dico[STOP_TAG] = -2\n","    tag_to_id, id_to_tag = create_mapping(dico)\n","    print(\"Found %i unique named entity tags\" % len(dico))\n","    return dico, tag_to_id, id_to_tag\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"c58bNxTKbSxC","colab_type":"code","outputId":"4c8d4d48-7830-487f-e667-f1b15e172da5","executionInfo":{"status":"ok","timestamp":1583365188973,"user_tz":-330,"elapsed":3050,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["dico_words,word_to_id,id_to_word = word_mapping(train_sentences, parameters['lower'])\n","dico_chars, char_to_id, id_to_char = char_mapping(train_sentences)\n","dico_tags, tag_to_id, id_to_tag = tag_mapping(train_sentences, train_labels)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Found 575 unique words (2823 in total)\n","Found 63 unique characters\n","Found 5 unique named entity tags\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7vSpD3UiqFMj","colab_type":"code","outputId":"dc9e5b68-70e5-4c31-adf1-72e0761ee2fd","executionInfo":{"status":"ok","timestamp":1583365190977,"user_tz":-330,"elapsed":1791,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["dico_tags"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 27540, 1: 31177, 2: 28726, '<START>': -1, '<STOP>': -2}"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"8eNR1yOTc0Lv","colab_type":"code","outputId":"c1f8ebd5-8fd7-42bd-feb6-9a36e49252a2","executionInfo":{"status":"ok","timestamp":1583365194535,"user_tz":-330,"elapsed":2661,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["c =0\n","for i in range(len(train_sentences[0])):\n","  s = train_sentences[0][i]\n","  if len(s) != len(train_labels[i][1]):\n","    # print(len(s) , len(labels[i][1]))\n","    # print(s, labels[i][1])\n","    # print(i)\n","    # break\n","    c+=1\n","print(c)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FzYyLtn1k1PL","colab_type":"code","colab":{}},"source":["def lower_case(x,lower=False):\n","    if lower:\n","        return x.lower()  \n","    else:\n","        return x"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3bo_OLbSqSoR","colab_type":"code","outputId":"3c8922bb-d776-4ece-fe12-b7b840d82e9e","executionInfo":{"status":"ok","timestamp":1583365197729,"user_tz":-330,"elapsed":4540,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def prepare_dataset(sentences, data_labels, word_to_id, char_to_id, tag_to_id, lower=False):\n","    \"\"\"\n","    Prepare the dataset. Return a list of lists of dictionaries containing:\n","        - word indexes\n","        - word char indexes\n","        - tag indexes\n","    \"\"\"\n","    data = []\n","    i = -1\n","    for s in sentences:\n","        i+=1\n","        str_words = [w[0] for w in s]\n","        words = [word_to_id[lower_case(w,lower) if lower_case(w,lower) in word_to_id else '<UNK>']\n","                 for w in str_words]\n","        # Skip characters that are not in the training set\n","        chars = [[char_to_id[c] for c in w if c in char_to_id]\n","                 for w in str_words]\n","        # tags = [tag_to_id[w[-1]] for w in s]\n","        tags = [tag_to_id[x] for x in data_labels[i][1]]\n","        data.append({\n","            'str_words': str_words,\n","            'words': words,\n","            'chars': chars,\n","            'tags': tags,\n","        })with or without you\n","    return data\n","\n","train_data = prepare_dataset(\n","    train_sentences[0], train_labels, word_to_id, char_to_id, tag_to_id, parameters['lower']\n",")\n","dev_data = prepare_dataset(\n","    dev_sentences[0], dev_labels, word_to_id, char_to_id, tag_to_id, parameters['lower']\n",")\n","# test_data = prepare_dataset(\n","#     test_sentences, word_to_id, char_to_id, tag_to_id, parameters['lower']\n","# )\n","print(\"{} / {} sentences in train / dev.\".format(len(train_data), len(dev_data)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2823 / 708 sentences in train / dev.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t4WNqKf2tz6G","colab_type":"code","colab":{}},"source":["### MODEL!!!???!!!"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"15_-agFlv3wt","colab_type":"code","outputId":"e78caf91-f3a9-447d-d251-462609eacdd3","executionInfo":{"status":"ok","timestamp":1583365248596,"user_tz":-330,"elapsed":49426,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["all_word_embeds = {}\n","for i, line in enumerate(codecs.open(parameters['embedding_path'], 'r', 'utf-8')):\n","    s = line.strip().split()\n","    if len(s) == parameters['word_dim'] + 1:\n","        all_word_embeds[s[0]] = np.array([float(i) for i in s[1:]])\n","\n","#Intializing Word Embedding Matrix\n","word_embeds = np.random.uniform(-np.sqrt(0.06), np.sqrt(0.06), (len(word_to_id), parameters['word_dim']))\n","\n","for w in word_to_id:\n","    if w in all_word_embeds:\n","        word_embeds[word_to_id[w]] = all_word_embeds[w]\n","    elif w.lower() in all_word_embeds:\n","        word_embeds[word_to_id[w]] = all_word_embeds[w.lower()]\n","\n","print('Loaded %i pretrained embeddings.' % len(all_word_embeds))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Loaded 400001 pretrained embeddings.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"T85qVChkwpWp","colab_type":"code","outputId":"1ce64ac1-4912-457c-ccf5-49278e6cffa8","executionInfo":{"status":"ok","timestamp":1583365249341,"user_tz":-330,"elapsed":47046,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["with open(mapping_file, 'wb') as f:\n","    mappings = {\n","        'word_to_id': word_to_id,\n","        'tag_to_id': tag_to_id,\n","        'char_to_id': char_to_id,\n","        'parameters': parameters,\n","        'word_embeds': word_embeds\n","    }\n","    cPickle.dump(mappings, f)\n","\n","print('word_to_id: ', len(word_to_id))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["word_to_id:  575\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IUpWoifNwxIz","colab_type":"code","colab":{}},"source":["### Actual Model !!!   copycat"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bJc_-DDmxMAo","colab_type":"code","colab":{}},"source":["def init_embedding(input_embedding):\n","    \"\"\"\n","    Initialize embedding\n","    \"\"\"\n","    bias = np.sqrt(3.0 / input_embedding.size(1))\n","    nn.init.uniform(input_embedding, -bias, bias)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"T1JyfWsdxOa9","colab_type":"code","colab":{}},"source":["def init_linear(input_linear):\n","    \"\"\"\n","    Initialize linear transformation\n","    \"\"\"\n","    bias = np.sqrt(6.0 / (input_linear.weight.size(0) + input_linear.weight.size(1)))\n","    nn.init.uniform(input_linear.weight, -bias, bias)\n","    if input_linear.bias is not None:\n","        input_linear.bias.data.zero_()\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YgSBKczAxPep","colab_type":"code","colab":{}},"source":["def init_lstm(input_lstm):\n","    \"\"\"\n","    Initialize lstm\n","    \n","    PyTorch weights parameters:\n","    \n","        weight_ih_l[k]: the learnable input-hidden weights of the k-th layer,\n","            of shape `(hidden_size * input_size)` for `k = 0`. Otherwise, the shape is\n","            `(hidden_size * hidden_size)`\n","            \n","        weight_hh_l[k]: the learnable hidden-hidden weights of the k-th layer,\n","            of shape `(hidden_size * hidden_size)`            \n","    \"\"\"\n","    \n","    # Weights init for forward layer\n","    for ind in range(0, input_lstm.num_layers):\n","        \n","        ## Gets the weights Tensor from our model, for the input-hidden weights in our current layer\n","        weight = eval('input_lstm.weight_ih_l' + str(ind))\n","        \n","        # Initialize the sampling range\n","        sampling_range = np.sqrt(6.0 / (weight.size(0) / 4 + weight.size(1)))\n","        \n","        # Randomly sample from our samping range using uniform distribution and apply it to our current layer\n","        nn.init.uniform(weight, -sampling_range, sampling_range)\n","        \n","        # Similar to above but for the hidden-hidden weights of the current layer\n","        weight = eval('input_lstm.weight_hh_l' + str(ind))\n","        sampling_range = np.sqrt(6.0 / (weight.size(0) / 4 + weight.size(1)))\n","        nn.init.uniform(weight, -sampling_range, sampling_range)\n","        \n","        \n","    # We do the above again, for the backward layer if we are using a bi-directional LSTM (our final model uses this)\n","    if input_lstm.bidirectional:\n","        for ind in range(0, input_lstm.num_layers):\n","            weight = eval('input_lstm.weight_ih_l' + str(ind) + '_reverse')\n","            sampling_range = np.sqrt(6.0 / (weight.size(0) / 4 + weight.size(1)))\n","            nn.init.uniform(weight, -sampling_range, sampling_range)\n","            weight = eval('input_lstm.weight_hh_l' + str(ind) + '_reverse')\n","            sampling_range = np.sqrt(6.0 / (weight.size(0) / 4 + weight.size(1)))\n","            nn.init.uniform(weight, -sampling_range, sampling_range)\n","\n","    # Bias initialization steps\n","    \n","    # We initialize them to zero except for the forget gate bias, which is initialized to 1\n","    if input_lstm.bias:\n","        for ind in range(0, input_lstm.num_layers):\n","            bias = eval('input_lstm.bias_ih_l' + str(ind))\n","            \n","            # Initializing to zero\n","            bias.data.zero_()\n","            \n","            # This is the range of indices for our forget gates for each LSTM cell\n","            bias.data[input_lstm.hidden_size: 2 * input_lstm.hidden_size] = 1\n","            \n","            #Similar for the hidden-hidden layer\n","            bias = eval('input_lstm.bias_hh_l' + str(ind))\n","            bias.data.zero_()\n","            bias.data[input_lstm.hidden_size: 2 * input_lstm.hidden_size] = 1\n","            \n","        # Similar to above, we do for backward layer if we are using a bi-directional LSTM \n","        if input_lstm.bidirectional:\n","            for ind in range(0, input_lstm.num_layers):\n","                bias = eval('input_lstm.bias_ih_l' + str(ind) + '_reverse')\n","                bias.data.zero_()\n","                bias.data[input_lstm.hidden_size: 2 * input_lstm.hidden_size] = 1\n","                bias = eval('input_lstm.bias_hh_l' + str(ind) + '_reverse')\n","                bias.data.zero_()\n","                bias.data[input_lstm.hidden_size: 2 * input_lstm.hidden_size] = 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-huPqPkDxTLC","colab_type":"code","colab":{}},"source":["def log_sum_exp(vec):\n","    '''\n","    This function calculates the score explained above for the forward algorithm\n","    vec 2D: 1 * tagset_size\n","    '''\n","    max_score = vec[0, argmax(vec)]\n","    max_score_broadcast = max_score.view(1, -1).expand(1, vec.size()[1])\n","    return max_score + torch.log(torch.sum(torch.exp(vec - max_score_broadcast)))\n","    \n","def argmax(vec):\n","    '''\n","    This function returns the max index in a vector\n","    '''\n","    _, idx = torch.max(vec, 1)\n","    return to_scalar(idx)\n","\n","def to_scalar(var):\n","    '''\n","    Function to convert pytorch tensor to a scalar\n","    '''\n","    return var.view(-1).data.tolist()[0]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5l8djKQMxX-f","colab_type":"code","colab":{}},"source":["def score_sentences(self, feats, tags):\n","    # tags is ground_truth, a list of ints, length is len(sentence)\n","    # feats is a 2D tensor, len(sentence) * tagset_size\n","    r = torch.LongTensor(range(feats.size()[0]))\n","    if self.use_gpu:\n","        r = r.cuda()\n","        pad_start_tags = torch.cat([torch.cuda.LongTensor([self.tag_to_ix[START_TAG]]), tags])\n","        pad_stop_tags = torch.cat([tags, torch.cuda.LongTensor([self.tag_to_ix[STOP_TAG]])])\n","    else:\n","        pad_start_tags = torch.cat([torch.LongTensor([self.tag_to_ix[START_TAG]]), tags])\n","        pad_stop_tags = torch.cat([tags, torch.LongTensor([self.tag_to_ix[STOP_TAG]])])\n","\n","    score = torch.sum(self.transitions[pad_stop_tags, pad_start_tags]) + torch.sum(feats[r, tags])\n","\n","    return score"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ctnNSdMmxaNz","colab_type":"code","colab":{}},"source":["def forward_alg(self, feats):\n","    '''\n","    This function performs the forward algorithm explained above\n","    '''\n","    # calculate in log domain\n","    # feats is len(sentence) * tagset_size\n","    # initialize alpha with a Tensor with values all equal to -10000.\n","    \n","    # Do the forward algorithm to compute the partition function\n","    init_alphas = torch.Tensor(1, self.tagset_size).fill_(-10000.)\n","    \n","    # START_TAG has all of the score.\n","    init_alphas[0][self.tag_to_ix[START_TAG]] = 0.\n","    \n","    # Wrap in a variable so that we will get automatic backprop\n","    forward_var = autograd.Variable(init_alphas)\n","    if self.use_gpu:\n","        forward_var = forward_var.cuda()\n","        \n","    # Iterate through the sentence\n","    for feat in feats:\n","        # broadcast the emission score: it is the same regardless of\n","        # the previous tag\n","        emit_score = feat.view(-1, 1)\n","        \n","        # the ith entry of trans_score is the score of transitioning to\n","        # next_tag from i\n","        tag_var = forward_var + self.transitions + emit_score\n","        \n","        # The ith entry of next_tag_var is the value for the\n","        # edge (i -> next_tag) before we do log-sum-exp\n","        max_tag_var, _ = torch.max(tag_var, dim=1)\n","        \n","        # The forward variable for this tag is log-sum-exp of all the\n","        # scores.\n","        tag_var = tag_var - max_tag_var.view(-1, 1)\n","        \n","        # Compute log sum exp in a numerically stable way for the forward algorithm\n","        forward_var = max_tag_var + torch.log(torch.sum(torch.exp(tag_var), dim=1)).view(1, -1) # ).view(1, -1)\n","    terminal_var = (forward_var + self.transitions[self.tag_to_ix[STOP_TAG]]).view(1, -1)\n","    alpha = log_sum_exp(terminal_var)\n","    # Z(x)\n","    return alpha"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qJTtfdcfxcPG","colab_type":"code","colab":{}},"source":["def viterbi_algo(self, feats):\n","    '''\n","    In this function, we implement the viterbi algorithm explained above.\n","    A Dynamic programming based approach to find the best tag sequence\n","    '''\n","    backpointers = []\n","    # analogous to forward\n","    \n","    # Initialize the viterbi variables in log space\n","    init_vvars = torch.Tensor(1, self.tagset_size).fill_(-10000.)\n","    init_vvars[0][self.tag_to_ix[START_TAG]] = 0\n","    \n","    # forward_var at step i holds the viterbi variables for step i-1\n","    forward_var = Variable(init_vvars)\n","    if self.use_gpu:\n","        forward_var = forward_var.cuda()\n","    for feat in feats:\n","        next_tag_var = forward_var.view(1, -1).expand(self.tagset_size, self.tagset_size) + self.transitions\n","        _, bptrs_t = torch.max(next_tag_var, dim=1)\n","        bptrs_t = bptrs_t.squeeze().data.cpu().numpy() # holds the backpointers for this step\n","        next_tag_var = next_tag_var.data.cpu().numpy() \n","        viterbivars_t = next_tag_var[range(len(bptrs_t)), bptrs_t] # holds the viterbi variables for this step\n","        viterbivars_t = Variable(torch.FloatTensor(viterbivars_t))\n","        if self.use_gpu:\n","            viterbivars_t = viterbivars_t.cuda()\n","            \n","        # Now add in the emission scores, and assign forward_var to the set\n","        # of viterbi variables we just computed\n","        forward_var = viterbivars_t + feat\n","        backpointers.append(bptrs_t)\n","\n","    # Transition to STOP_TAG\n","    terminal_var = forward_var + self.transitions[self.tag_to_ix[STOP_TAG]]\n","    terminal_var.data[self.tag_to_ix[STOP_TAG]] = -10000.\n","    terminal_var.data[self.tag_to_ix[START_TAG]] = -10000.\n","    best_tag_id = argmax(terminal_var.unsqueeze(0))\n","    path_score = terminal_var[best_tag_id]\n","    \n","    # Follow the back pointers to decode the best path.\n","    best_path = [best_tag_id]\n","    for bptrs_t in reversed(backpointers):\n","        best_tag_id = bptrs_t[best_tag_id]\n","        best_path.append(best_tag_id)\n","        \n","    # Pop off the start tag (we dont want to return that to the caller)\n","    start = best_path.pop()\n","    assert start == self.tag_to_ix[START_TAG] # Sanity check\n","    best_path.reverse()\n","    return path_score, best_path"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lh567lAVxfOy","colab_type":"code","colab":{}},"source":["def forward_calc(self, sentence, chars, chars2_length, d):\n","    \n","    '''\n","    The function calls viterbi decode and generates the \n","    most probable sequence of tags for the sentence\n","    '''\n","    \n","    # Get the emission scores from the BiLSTM\n","    feats = self._get_lstm_features(sentence, chars, chars2_length, d)\n","    # viterbi to get tag_seq\n","    \n","    # Find the best path, given the features.\n","    if self.use_crf:\n","        score, tag_seq = self.viterbi_decode(feats)\n","    else:\n","        score, tag_seq = torch.max(feats, 1)\n","        tag_seq = list(tag_seq.cpu().data)\n","\n","    return score, tag_seq"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ie_dEUYZxhFC","colab_type":"code","colab":{}},"source":["## So many functions!!!"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X_FDguhNxi5C","colab_type":"code","colab":{}},"source":["\n","\n","def get_lstm_features(self, sentence, chars2, chars2_length, d):\n","    \n","    if self.char_mode == 'LSTM':\n","        \n","            chars_embeds = self.char_embeds(chars2).transpose(0, 1)\n","            \n","            packed = torch.nn.utils.rnn.pack_padded_sequence(chars_embeds, chars2_length)\n","            \n","            lstm_out, _ = self.char_lstm(packed)\n","            \n","            outputs, output_lengths = torch.nn.utils.rnn.pad_packed_sequence(lstm_out)\n","            \n","            outputs = outputs.transpose(0, 1)\n","            \n","            chars_embeds_temp = Variable(torch.FloatTensor(torch.zeros((outputs.size(0), outputs.size(2)))))\n","            \n","            if self.use_gpu:\n","                chars_embeds_temp = chars_embeds_temp.cuda()\n","            \n","            for i, index in enumerate(output_lengths):\n","                chars_embeds_temp[i] = torch.cat((outputs[i, index-1, :self.char_lstm_dim], outputs[i, 0, self.char_lstm_dim:]))\n","            \n","            chars_embeds = chars_embeds_temp.clone()\n","            \n","            for i in range(chars_embeds.size(0)):\n","                chars_embeds[d[i]] = chars_embeds_temp[i]\n","    \n","    \n","    if self.char_mode == 'CNN':\n","        chars_embeds = self.char_embeds(chars2).unsqueeze(1)\n","\n","        ## Creating Character level representation using Convolutional Neural Netowrk\n","        ## followed by a Maxpooling Layer\n","        chars_cnn_out3 = self.char_cnn3(chars_embeds)\n","        chars_embeds = nn.functional.max_pool2d(chars_cnn_out3,\n","                                             kernel_size=(chars_cnn_out3.size(2), 1)).view(chars_cnn_out3.size(0), self.out_channels)\n","\n","        ## Loading word embeddings\n","    embeds = self.word_embeds(sentence)\n","\n","    ## We concatenate the word embeddings and the character level representation\n","    ## to create unified representation for each word\n","    embeds = torch.cat((embeds, chars_embeds), 1)\n","\n","    embeds = embeds.unsqueeze(1)\n","\n","    ## Dropout on the unified embeddings\n","    embeds = self.dropout(embeds)\n","\n","    ## Word lstm\n","    ## Takes words as input and generates a output at each step\n","    lstm_out, _ = self.lstm(embeds)\n","\n","    ## Reshaping the outputs from the lstm layer\n","    lstm_out = lstm_out.view(len(sentence), self.hidden_dim*2)\n","\n","    ## Dropout on the lstm output\n","    lstm_out = self.dropout(lstm_out)\n","\n","    ## Linear layer converts the ouput vectors to tag space\n","    lstm_feats = self.hidden2tag(lstm_out)\n","    \n","    return lstm_feats\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RA6wxYFBxmMw","colab_type":"code","colab":{}},"source":["def get_neg_log_likelihood(self, sentence, tags, chars2, chars2_length, d):\n","    # sentence, tags is a list of ints\n","    # features is a 2D tensor, len(sentence) * self.tagset_size\n","    feats = self._get_lstm_features(sentence, chars2, chars2_length, d)\n","\n","    if self.use_crf:\n","        forward_score = self._forward_alg(feats)\n","        gold_score = self._score_sentence(feats, tags)\n","        return forward_score - gold_score\n","    else:\n","        tags = Variable(tags)\n","        scores = nn.functional.cross_entropy(feats, tags)\n","        return scores"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"104NLXKBxoK4","colab_type":"code","colab":{}},"source":["class BiLSTM_CRF(nn.Module):\n","\n","    def __init__(self, vocab_size, tag_to_ix, embedding_dim, hidden_dim,\n","                 char_to_ix=None, pre_word_embeds=None, char_out_dimension=25,char_embedding_dim=25, use_gpu=False\n","                 , use_crf=True, char_mode='CNN'):\n","        '''\n","        Input parameters:\n","                \n","                vocab_size= Size of vocabulary (int)\n","                tag_to_ix = Dictionary that maps NER tags to indices\n","                embedding_dim = Dimension of word embeddings (int)\n","                hidden_dim = The hidden dimension of the LSTM layer (int)\n","                char_to_ix = Dictionary that maps characters to indices\n","                pre_word_embeds = Numpy array which provides mapping from word embeddings to word indices\n","                char_out_dimension = Output dimension from the CNN encoder for character\n","                char_embedding_dim = Dimension of the character embeddings\n","                use_gpu = defines availability of GPU, \n","                    when True: CUDA function calls are made\n","                    else: Normal CPU function calls are made\n","                use_crf = parameter which decides if you want to use the CRF layer for output decoding\n","        '''\n","        \n","        super(BiLSTM_CRF, self).__init__()\n","        \n","        #parameter initialization for the model\n","        self.use_gpu = use_gpu\n","        self.embedding_dim = embedding_dim\n","        self.hidden_dim = hidden_dim\n","        self.vocab_size = vocab_size\n","        self.tag_to_ix = tag_to_ix\n","        self.use_crf = use_crf\n","        self.tagset_size = len(tag_to_ix)\n","        self.out_channels = char_out_dimension\n","        self.char_mode = char_mode\n","\n","        if char_embedding_dim is not None:\n","            self.char_embedding_dim = char_embedding_dim\n","            \n","            #Initializing the character embedding layer\n","            self.char_embeds = nn.Embedding(len(char_to_ix), char_embedding_dim)\n","            init_embedding(self.char_embeds.weight)\n","            \n","            #Performing LSTM encoding on the character embeddings\n","            if self.char_mode == 'LSTM':\n","                self.char_lstm = nn.LSTM(char_embedding_dim, char_lstm_dim, num_layers=1, bidirectional=True)\n","                init_lstm(self.char_lstm)\n","                \n","            #Performing CNN encoding on the character embeddings\n","            if self.char_mode == 'CNN':\n","                self.char_cnn3 = nn.Conv2d(in_channels=1, out_channels=self.out_channels, kernel_size=(3, char_embedding_dim), padding=(2,0))\n","\n","        #Creating Embedding layer with dimension of ( number of words * dimension of each word)\n","        self.word_embeds = nn.Embedding(vocab_size, embedding_dim)\n","        if pre_word_embeds is not None:\n","            #Initializes the word embeddings with pretrained word embeddings\n","            self.pre_word_embeds = True\n","            self.word_embeds.weight = nn.Parameter(torch.FloatTensor(pre_word_embeds))\n","        else:\n","            self.pre_word_embeds = False\n","    \n","        #Initializing the dropout layer, with dropout specificed in parameters\n","        self.dropout = nn.Dropout(parameters['dropout'])\n","        \n","        #Lstm Layer:\n","        #input dimension: word embedding dimension + character level representation\n","        #bidirectional=True, specifies that we are using the bidirectional LSTM\n","        if self.char_mode == 'LSTM':\n","            self.lstm = nn.LSTM(embedding_dim+char_lstm_dim*2, hidden_dim, bidirectional=True)\n","        if self.char_mode == 'CNN':\n","            self.lstm = nn.LSTM(embedding_dim+self.out_channels, hidden_dim, bidirectional=True)\n","        \n","        #Initializing the lstm layer using predefined function for initialization\n","        init_lstm(self.lstm)\n","        \n","        # Linear layer which maps the output of the bidirectional LSTM into tag space.\n","        self.hidden2tag = nn.Linear(hidden_dim*2, self.tagset_size)\n","        \n","        #Initializing the linear layer using predefined function for initialization\n","        init_linear(self.hidden2tag) \n","\n","        if self.use_crf:\n","            # Matrix of transition parameters.  Entry i,j is the score of transitioning *to* i *from* j.\n","            # Matrix has a dimension of (total number of tags * total number of tags)\n","            self.transitions = nn.Parameter(\n","                torch.zeros(self.tagset_size, self.tagset_size))\n","            \n","            # These two statements enforce the constraint that we never transfer\n","            # to the start tag and we never transfer from the stop tag\n","            self.transitions.data[tag_to_ix[START_TAG], :] = -10000\n","            self.transitions.data[:, tag_to_ix[STOP_TAG]] = -10000\n","\n","    #assigning the functions, which we have defined earlier\n","    _score_sentence = score_sentences\n","    _get_lstm_features = get_lstm_features\n","    _forward_alg = forward_alg\n","    viterbi_decode = viterbi_algo\n","    neg_log_likelihood = get_neg_log_likelihood\n","    forward = forward_calc"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4z03GqA4xtlT","colab_type":"code","outputId":"d100ad3b-3443-417e-e841-82c720a13fb4","executionInfo":{"status":"ok","timestamp":1583365365511,"user_tz":-330,"elapsed":2692,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["#creating the model using the Class defined above\n","model = BiLSTM_CRF(vocab_size=len(word_to_id),\n","                   tag_to_ix=tag_to_id,\n","                   embedding_dim=parameters['word_dim'],\n","                   hidden_dim=parameters['word_lstm_dim'],\n","                   use_gpu=use_gpu,\n","                   char_to_ix=char_to_id,\n","                   pre_word_embeds=word_embeds,\n","                   use_crf=parameters['crf'],\n","                   char_mode=parameters['char_mode'])\n","if use_gpu:\n","  model.cuda()\n","print(\"Model Initialized!!!\")\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model Initialized!!!\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: UserWarning: nn.init.uniform is now deprecated in favor of nn.init.uniform_.\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:25: UserWarning: nn.init.uniform is now deprecated in favor of nn.init.uniform_.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:30: UserWarning: nn.init.uniform is now deprecated in favor of nn.init.uniform_.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:38: UserWarning: nn.init.uniform is now deprecated in favor of nn.init.uniform_.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:41: UserWarning: nn.init.uniform is now deprecated in favor of nn.init.uniform_.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"6c-34rhsxybV","colab_type":"code","colab":{}},"source":["# if parameters['reload']:\n","#     if not os.path.exists(parameters['reload']):\n","#         print(\"downloading pre-trained model\")\n","#         model_url=\"https://github.com/TheAnig/NER-LSTM-CNN-Pytorch/raw/master/trained-model-cpu\"\n","#         urllib.request.urlretrieve(model_url, parameters['reload'])\n","#     model.load_state_dict(torch.load(parameters['reload']))\n","#     print(\"model reloaded :\", parameters['reload'])\n","\n","# if use_gpu:\n","#     model.cuda()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0eA5F2bqx9TY","colab_type":"code","colab":{}},"source":["#Initializing the optimizer\n","#The best results in the paper where achived using stochastic gradient descent (SGD) \n","#learning rate=0.015 and momentum=0.9 \n","#decay_rate=0.05 \n","\n","learning_rate = 0.015\n","momentum = 0.9\n","number_of_epochs = parameters['epoch'] \n","decay_rate = 0.05\n","gradient_clip = parameters['gradient_clip']\n","optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum)\n","\n","#variables which will used in training process\n","losses = [] #list to store all losses\n","loss = 0.0 #Loss Initializatoin\n","best_dev_F = -1.0 # Current best F-1 Score on Dev Set\n","best_test_F = -1.0 # Current best F-1 Score on Test Set\n","best_train_F = -1.0 # Current best F-1 Score on Train Set\n","all_F = [[0, 0, 0]] # List storing all the F-1 Scores\n","eval_every = len(train_data) # Calculate F-1 Score after this many iterations\n","plot_every = 2000 # Store loss after this many iterations\n","count = 0 #Counts the number of iterations"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"M5ekdT9JyB0e","colab_type":"code","colab":{}},"source":["def get_chunk_type(tok, idx_to_tag):\n","    \"\"\"\n","    The function takes in a chunk (\"B-PER\") and then splits it into the tag (PER) and its class (B)\n","    as defined in BIOES\n","    \n","    Args:\n","        tok: id of token, ex 4\n","        idx_to_tag: dictionary {4: \"B-PER\", ...}\n","\n","    Returns:\n","        tuple: \"B\", \"PER\"\n","\n","    \"\"\"\n","    \n","    tag_name = idx_to_tag[tok]\n","    tag_class = tag_name.split('-')[0]\n","    tag_type = tag_name.split('-')[-1]\n","    return tag_class, tag_type"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3XH9soVtyFxL","colab_type":"code","colab":{}},"source":["def get_chunks(seq, tags):\n","    \"\"\"Given a sequence of tags, group entities and their position\n","\n","    Args:\n","        seq: [4, 4, 0, 0, ...] sequence of labels\n","        tags: dict[\"O\"] = 4\n","\n","    Returns:\n","        list of (chunk_type, chunk_start, chunk_end)\n","\n","    Example:\n","        seq = [4, 5, 0, 3]\n","        tags = {\"B-PER\": 4, \"I-PER\": 5, \"B-LOC\": 3}\n","        result = [(\"PER\", 0, 2), (\"LOC\", 3, 4)]\n","\n","    \"\"\"\n","    \n","    # We assume by default the tags lie outside a named entity\n","    print(tags)\n","    default = tags[\"O\"]\n","    \n","    idx_to_tag = {idx: tag for tag, idx in tags.items()}\n","    \n","    chunks = []\n","    \n","    chunk_type, chunk_start = None, None\n","    for i, tok in enumerate(seq):\n","        # End of a chunk 1\n","        if tok == default and chunk_type is not None:\n","            # Add a chunk.\n","            chunk = (chunk_type, chunk_start, i)\n","            chunks.append(chunk)\n","            chunk_type, chunk_start = None, None\n","\n","        # End of a chunk + start of a chunk!\n","        elif tok != default:\n","            tok_chunk_class, tok_chunk_type = get_chunk_type(tok, idx_to_tag)\n","            if chunk_type is None:\n","                # Initialize chunk for each entity\n","                chunk_type, chunk_start = tok_chunk_type, i\n","            elif tok_chunk_type != chunk_type or tok_chunk_class == \"B\":\n","                # If chunk class is B, i.e., its a beginning of a new named entity\n","                # or, if the chunk type is different from the previous one, then we\n","                # start labelling it as a new entity\n","                chunk = (chunk_type, chunk_start, i)\n","                chunks.append(chunk)\n","                chunk_type, chunk_start = tok_chunk_type, i\n","        else:\n","            pass\n","\n","    # end condition\n","    if chunk_type is not None:\n","        chunk = (chunk_type, chunk_start, len(seq))\n","        chunks.append(chunk)\n","\n","    return chunks"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bo917jkvyHWT","colab_type":"code","colab":{}},"source":["def evaluating(model, datas, best_F,dataset=\"Train\"):\n","    '''\n","    The function takes as input the model, data and calcuates F-1 Score\n","    It performs conditional updates \n","     1) Flag to save the model \n","     2) Best F-1 score\n","    ,if the F-1 score calculated improves on the previous F-1 score\n","    '''\n","    # Initializations\n","    prediction = [] # A list that stores predicted tags\n","    save = False # Flag that tells us if the model needs to be saved\n","    new_F = 0.0 # Variable to store the current F1-Score (may not be the best)\n","    correct_preds, total_correct, total_preds = 0., 0., 0. # Count variables\n","    \n","    for data in datas:\n","        ground_truth_id = data['tags']\n","        words = data['str_words']\n","        chars2 = data['chars']\n","        \n","        if parameters['char_mode'] == 'LSTM':\n","            chars2_sorted = sorted(chars2, key=lambda p: len(p), reverse=True)\n","            d = {}\n","            for i, ci in enumerate(chars2):\n","                for j, cj in enumerate(chars2_sorted):\n","                    if ci == cj and not j in d and not i in d.values():\n","                        d[j] = i\n","                        continue\n","            chars2_length = [len(c) for c in chars2_sorted]\n","            char_maxl = max(chars2_length)\n","            chars2_mask = np.zeros((len(chars2_sorted), char_maxl), dtype='int')\n","            for i, c in enumerate(chars2_sorted):\n","                chars2_mask[i, :chars2_length[i]] = c\n","            chars2_mask = Variable(torch.LongTensor(chars2_mask))\n","        \n","        \n","        if parameters['char_mode'] == 'CNN':\n","            d = {} \n","\n","            # Padding the each word to max word size of that sentence\n","            chars2_length = [len(c) for c in chars2]\n","            char_maxl = max(chars2_length)\n","            chars2_mask = np.zeros((len(chars2_length), char_maxl), dtype='int')\n","            for i, c in enumerate(chars2):\n","                chars2_mask[i, :chars2_length[i]] = c\n","            chars2_mask = Variable(torch.LongTensor(chars2_mask))\n","\n","        dwords = Variable(torch.LongTensor(data['words']))\n","        \n","        # We are getting the predicted output from our model\n","        if use_gpu:\n","            val,out = model(dwords.cuda(), chars2_mask.cuda(), chars2_length, d)\n","        else:\n","            val,out = model(dwords, chars2_mask, chars2_length, d)\n","        predicted_id = out\n","    \n","        \n","        # We use the get chunks function defined above to get the true chunks\n","        # and the predicted chunks from true labels and predicted labels respectively\n","        lab_chunks      = set(get_chunks(ground_truth_id,tag_to_id))\n","        lab_pred_chunks = set(get_chunks(predicted_id,\n","                                         tag_to_id))\n","\n","        # Updating the count variables\n","        correct_preds += len(lab_chunks & lab_pred_chunks)\n","        total_preds   += len(lab_pred_chunks)\n","        total_correct += len(lab_chunks)\n","    \n","    # Calculating the F1-Score\n","    p   = correct_preds / total_preds if correct_preds > 0 else 0\n","    r   = correct_preds / total_correct if correct_preds > 0 else 0\n","    new_F  = 2 * p * r / (p + r) if correct_preds > 0 else 0\n","\n","    print(\"{}: new_F: {} best_F: {} \".format(dataset,new_F,best_F))\n","    \n","    # If our current F1-Score is better than the previous best, we update the best\n","    # to current F1 and we set the flag to indicate that we need to checkpoint this model\n","    \n","    if new_F>best_F:\n","        best_F=new_F\n","        save=True\n","\n","    return best_F, new_F, save"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QdE77Nk5yJiy","colab_type":"code","colab":{}},"source":["def adjust_learning_rate(optimizer, lr):\n","    \"\"\"\n","    shrink learning rate\n","    \"\"\"\n","    for param_group in optimizer.param_groups:\n","        param_group['lr'] = lr"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EXB0uFiwyLW3","colab_type":"code","outputId":"27f0ffc0-e902-4740-b82c-a14df2c94fbd","executionInfo":{"status":"error","timestamp":1583370067613,"user_tz":-330,"elapsed":207782,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":504}},"source":["#parameters['reload']=False\n","\n","if not parameters['reload']:\n","    tr = time.time()\n","    model.train(True)\n","    for epoch in range(1,number_of_epochs):\n","        for i, index in enumerate(np.random.permutation(len(train_data))):\n","            count += 1\n","            data = train_data[index]\n","\n","            ##gradient updates for each data entry\n","            model.zero_grad()\n","\n","            sentence_in = data['words']\n","            sentence_in = Variable(torch.LongTensor(sentence_in))\n","            tags = data['tags']\n","            chars2 = data['chars']\n","            \n","            if parameters['char_mode'] == 'LSTM':\n","                chars2_sorted = sorted(chars2, key=lambda p: len(p), reverse=True)\n","                d = {}\n","                for i, ci in enumerate(chars2):\n","                    for j, cj in enumerate(chars2_sorted):\n","                        if ci == cj and not j in d and not i in d.values():\n","                            d[j] = i\n","                            continue\n","                chars2_length = [len(c) for c in chars2_sorted]\n","                char_maxl = max(chars2_length)\n","                chars2_mask = np.zeros((len(chars2_sorted), char_maxl), dtype='int')\n","                for i, c in enumerate(chars2_sorted):\n","                    chars2_mask[i, :chars2_length[i]] = c\n","                chars2_mask = Variable(torch.LongTensor(chars2_mask))\n","            \n","            if parameters['char_mode'] == 'CNN':\n","\n","                d = {}\n","\n","                ## Padding the each word to max word size of that sentence\n","                chars2_length = [len(c) for c in chars2]\n","                char_maxl = max(chars2_length)\n","                chars2_mask = np.zeros((len(chars2_length), char_maxl), dtype='int')\n","                for i, c in enumerate(chars2):\n","                    chars2_mask[i, :chars2_length[i]] = c\n","                chars2_mask = Variable(torch.LongTensor(chars2_mask))\n","\n","\n","            targets = torch.LongTensor(tags)\n","\n","            #we calculate the negative log-likelihood for the predicted tags using the predefined function\n","            if use_gpu:\n","                neg_log_likelihood = model.neg_log_likelihood(sentence_in.cuda(), targets.cuda(), chars2_mask.cuda(), chars2_length, d)\n","            else:\n","                neg_log_likelihood = model.neg_log_likelihood(sentence_in, targets, chars2_mask, chars2_length, d)\n","            loss += neg_log_likelihood.data.item() / len(data['words'])   # changed!\n","            neg_log_likelihood.backward()\n","\n","            #we use gradient clipping to avoid exploding gradients\n","            torch.nn.utils.clip_grad_norm(model.parameters(), gradient_clip)\n","            optimizer.step()\n","\n","            #Storing loss\n","            if count % plot_every == 0:\n","                loss /= plot_every\n","                print(count, ': ', loss)\n","                if losses == []:\n","                    losses.append(loss)\n","                losses.append(loss)\n","                loss = 0.0\n","\n","            #Evaluating on Train, Test, Dev Sets\n","            if count % (eval_every) == 0 and count > (eval_every * 20) or \\\n","                    count % (eval_every*4) == 0 and count < (eval_every * 20):\n","                model.eval()\n","                best_train_F, new_train_F, _ = evaluating(model, train_data, best_train_F,\"Train\")\n","                best_dev_F, new_dev_F, save = evaluating(model, dev_data, best_dev_F,\"Dev\")\n","                if save:\n","                    print(\"Saving Model to \", model_name)\n","                    torch.save(model.state_dict(), model_name)\n","                # best_test_F, new_test_F, _ = evaluating(model, test_data, best_test_F,\"Test\")\n","\n","                all_F.append([new_train_F, new_dev_F])#, new_test_F])\n","                model.train()\n","\n","            #Performing decay on the learning rate\n","            if count % len(train_data) == 0:\n","                adjust_learning_rate(optimizer, lr=learning_rate/(1+decay_rate*count/len(train_data)))\n","\n","    print(time.time() - tr)\n","    plt.plot(losses)\n","    plt.show()\n","\n","if not parameters['reload']:\n","    #reload the best model saved from training\n","    model.load_state_dict(torch.load(model_name))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:57: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.\n"],"name":"stderr"},{"output_type":"stream","text":["24000 :  1.189085662714018\n","26000 :  1.190351594581461\n","28000 :  1.188577671588539\n","30000 :  1.1962356525760094\n","32000 :  1.1920609216899956\n","{1: 0, 2: 1, 0: 2, '<START>': 3, '<STOP>': 4}\n"],"name":"stdout"},{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-65-26ffbe8707b7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     70\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mcount\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0meval_every\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcount\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0meval_every\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m                     \u001b[0mcount\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0meval_every\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcount\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0meval_every\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m                 \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m                 \u001b[0mbest_train_F\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_train_F\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluating\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_train_F\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Train\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m                 \u001b[0mbest_dev_F\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_dev_F\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msave\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluating\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdev_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_dev_F\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Dev\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0msave\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-63-63c3a06794f4>\u001b[0m in \u001b[0;36mevaluating\u001b[0;34m(model, datas, best_F, dataset)\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0;31m# We use the get chunks function defined above to get the true chunks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m         \u001b[0;31m# and the predicted chunks from true labels and predicted labels respectively\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m         \u001b[0mlab_chunks\u001b[0m      \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_chunks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mground_truth_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtag_to_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m         lab_pred_chunks = set(get_chunks(predicted_id,\n\u001b[1;32m     61\u001b[0m                                          tag_to_id))\n","\u001b[0;32m<ipython-input-62-73faa53f1faf>\u001b[0m in \u001b[0;36mget_chunks\u001b[0;34m(seq, tags)\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;31m# We assume by default the tags lie outside a named entity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mdefault\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"O\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0midx_to_tag\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtag\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtag\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'O'"]}]},{"cell_type":"code","metadata":{"id":"wlcGMuQoycGw","colab_type":"code","outputId":"77f531ee-fca0-44cb-9909-6f2ff49770ac","executionInfo":{"status":"error","timestamp":1583366014653,"user_tz":-330,"elapsed":3989,"user":{"displayName":"Rohin Garg","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRipBFTEJ6v12GnwjpEzLuUhVXi1p7m_uVGTruxw=s64","userId":"03455532354584450462"}},"colab":{"base_uri":"https://localhost:8080/","height":167}},"source":[""],"execution_count":0,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-61-4fca772bcf56>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtags\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"0\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not str"]}]}]}